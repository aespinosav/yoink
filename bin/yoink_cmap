#!/usr/bin/env python

from collections import OrderedDict

import matplotlib.pyplot as plt
plt.switch_backend('tkAgg')
from matplotlib.widgets import RadioButtons, Button
import numpy as np

from yoink.layout import make_selector_figure, make_annotate_figure
from yoink.widgets import ShutterCrop, DragableCmap
from yoink.data import test_img
from yoink.textbox import TextBoxFloat


class NothingWidget(object):
    active = False

    def set_visible(self, vis):
        pass


def set_extent(img, text, side):
    def set_extent():
        ext = list(img.get_extent())
        ext[side] = text.value
        img.set_extent(ext)
    return set_extent


#import argparse
#parser = argparse.ArgumentParser(
#        description='Yoink colored data from an image')
#parser.add_argument('image')

#args = parser.parse_args()
#img_path = args.image


sel_fig, sel_axes = make_selector_figure()
ann_fig, ann_axes = make_annotate_figure()

#im = plt.imread(img_path)
pixels = test_img()

# plot source data
sel_axes['img'].imshow(pixels)

# create shutters
crop_widget = ShutterCrop(sel_axes['img'])


def crop(pix, extent):
    x0, x1, y0, y1 = np.array(extent, dtype=int)
    if x1 < x0:
        x0, x1 = x1, x0
    if y1 < y0:
        y0, y1 = y1, y0
    return pix[y0:y1, x0:x1]


# create clipped & rescaled data
extent = crop_widget.get_extents()  # data (pixel) coordinates
clipped = crop(pixels, extent)
right_img = ann_axes['img'].imshow(clipped, aspect='auto')


def update_data():
    extent = crop_widget.get_extents()  # data (pixel) coordinates
    clipped = crop(pixels, extent)
    right_img.set_data(clipped)
    right_img.figure.canvas.draw()

crop_widget.add_callback(update_data)


# separage cmap_lo & cmap_hi ?
cmap_widget = DragableCmap(sel_axes['img'],
                           sel_axes['cmap'],
                           ann_axes['cmap_lo'],
                           ann_axes['cmap_hi'],
                           pixels)


# Create text boxes for x-axis & y-axis limits
# connect them to the right image so that it extents auto-update
ext = right_img.get_extent()
lo_x = TextBoxFloat(ann_axes['xlo'], str(ext[0]))
hi_x = TextBoxFloat(ann_axes['xhi'], str(ext[1]))
lo_y = TextBoxFloat(ann_axes['ylo'], str(ext[2]))
hi_y = TextBoxFloat(ann_axes['yhi'], str(ext[3]))

lo_x.add_callback(set_extent(right_img, lo_x, 0))
hi_x.add_callback(set_extent(right_img, hi_x, 1))
lo_y.add_callback(set_extent(right_img, lo_y, 2))
hi_y.add_callback(set_extent(right_img, hi_y, 3))


def dump(event):
    print 'dumping'


dump_button = Button(ann_axes['dump'], 'Dump to file')
dump_button.on_clicked(dump)


states = OrderedDict()
states['Do nothing'] = NothingWidget()
states['Select Colorbar'] = cmap_widget
states['Crop Image'] = crop_widget


def toggle_state(new_state):
    assert new_state in states
    for k in states:
        if k == new_state:
            continue
        states[k].active = False
        states[k].set_visible(False)
    states[new_state].active = True
    states[new_state].set_visible(True)
toggle_state(states.keys()[0])


select_radio = RadioButtons(sel_axes['select'], labels=states.keys(), active=0)
select_radio.on_clicked(toggle_state)

plt.show()
